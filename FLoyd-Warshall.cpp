#include <vector>
#include <iostream>

//벨만 포드 알고리즘보다 효율적인 이유는 벨만 포드 알고리즘은 모든 정점*V-1*모든 에지 이다.
//하지만 플로이드-워셜 알고리즘은 모든 정점*모든 정점*모든 정점이기 때문에 에지가 많은 dense graph에서는
//플로이드 워셜 알고리즘이 효과적이다.

using namespace std;

const int UNKNOWN = 1e9;
/*
* 이해가 쉽도록 쉬운 그래프를 입력으로 사용해봐라.
* 
* 			{0,1,3}
			{1,2,2}
			{2,3,1}
			{2,4,4}
			{1,4,1}

			0->1->2->3
				   ->4
				---->

*/

//플로이드-워셜 함수를 구현한다. 이 함수는 두 개의 인자 V와 Weight를 받고, 최단 거리가 저장된
//2차원 정수 벡터를 반환한다.
vector<vector<int>> FloydWarshall(int V, vector<vector<int>> weight)
{
	//distance라는 이름의 2차원 DP테이블을 정의하고, 모든 값을 UNKNOWN으로 초기화한다. 
	//그리고 가중치 행렬을 참조하여 초기 최단 거리 값을 설정하고, 각 정점에서 자기 자신까지의
	//거리 값은 0으로 설정한다. 여기서 일단 O(V^2)이 소요된다. 또한 공간 복잡도 또한 O(V^2)이다.
	vector<vector<int>> distance(V, vector<int>(V, UNKNOWN));

	//각 정점 사이의 거리를 가중치로 설정한다. 만약 정점들을 잇는 에지가 없으면 UNKNOWN값이 들어갈 것이다.
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < V; j++)
		{
			distance[i][j] = weight[i][j];
		}

		distance[i][i] = 0;
	}

	//여기서 O(V^3)의 시간이 소요된다. O(V^3+V^2)이므로 O(V^3)이다.

	//이제부터 (V-1)까지 반복하는 세 개의 중첩 for문을 작성한다. 가장 바깥쪽 for문은 중간 정점 mid,
	//가운데 for문은 시작 정점 start, 가장 안쪽 for문은 목표 정점 end를 인덱스로 사용한다. 반복문 안에서는 
	//모든 정점들 사이의 거리를 비교하여 더 짧은 거리가 발견되면 거리 값을 갱신한다.
	for (int mid = 0; mid < V; mid++)
	{
		for (int start = 0; start < V; start++)
		{
			for (int end = 0; end < V; end++)
			{
				cout << "mid: " << mid << "start: " << start << "end: " << end<<endl;
				//각 중간 지점들에 대해서 distance[start][end]가 업데이트 되고, 해당 지점까지 경로가 많으면
				//중간 지점도 많아진다. 가장 바깥쪽 루프가 중간 지점이므로 모든 정점이 중간 지점일 수 있고,
				//각 중간 지점에 대해서 모든 정점 쌍(start,end)에 대해서 거리가 비교된다.

				//위 쉬운 입력 그래프 예에서 0에서 4로 가는 경우는 0->1->2->3->4와 0->1->4가 있는데 
				//mid 루프에 의해서 모든 경로가 비교된다. 따라서 벨만-포드 알고리즘을 동적 계획법으로
				//구현한 코드는 하향식을 이용하고 전치 그래프에서 모든 경로를 탐색하지만, 플로이드-워셜은
				//상향식으로 모든 경로를 탐색한다. 플로이드-워셜과 벨만-포드(DP)는 시간 복잡도는 비슷하지만
				//dense graph의 경우에는 벨만-포드 알고리즘이 훨씬 연산량이 많으므로 플로이드-워셜 알고리즘이
				//좋다. 가장 일반적인 벨만-포드는 한 번의 반복에서는 모든 경로 탐색이 안되기 때문에 V-1반복을
				//진행한다. 즉 에지의 탐색 순서에 따라서 늦게 탐색되는 에지가 최소 경로라면 늦게
				// 늦게 탐색된 에지로 거리를 업데이트 해야 하지만 한 번의 반복에서는 거리가 한 번만 업데이트되기 때문에
				// V-1번 비교를 하는 것이다. 하지만 플로이드 워셜은 모든 에지에 대해 V-1 반복을 하는 것이 아니라 모든 경로를
				//탐색하는 방식으로 진행한다. 따라서 모든 경로에 대해서 대소 비교가 가능하다.
				//벨만 포드(DP) 방법은 메모이제이션을 사용한다. 또한 재귀가 주 로직이므로 에지가 많으면 연산이 많아진다.
				//하지만 플로이드 워셜 알고리즘은 정점에 대해서만 반복이 진행되기 때문에 dense graph에 대해서도 일정한
				//성능을 보여준다.
				if (distance[start][mid] + distance[mid][end] < distance[start][end])
				{
					auto temp = distance[start][end];
					distance[start][end] = distance[start][mid] + distance[mid][end];
					cout << "distance[" << start << "][" << end << "] = " << "distance[" << start << "][" << mid << "] + distance[" << mid <<
						"][" << end << "] : " << distance[start][end] << endl;
				}
			}
		}
	}

	//입력 그래프가 음수 가중치를 가질 수 있으므로 벨만-포드 알고리즘처럼 음수 가중치 사이클이 있는지를 확인해야 한다.
	//다행히도 이 작업은 distance 테이블을 이용하여 쉽게 수행할 수 있다. 그래프에서 사이클이란 길이가 0보다 길고 시작과
	//끝 정점이 같은 경로이다. 모든 정점 쌍 사이의 거리가 저장된 테이블에서 특정 정점 인덱스 i에서 자기 자신으로의 거리는
	//distance[i][i]에 저장된다. 양수 가중치만 있는 그래프에서는 distance[i][i]값이 분명히 0이 되어야 한다. 그러나 그래프에
	//음수 가중치 사이클이 있다면 distance[i][i]는 0보다 작은 음수가 된다. 따라서 다음과 같은 방식으로 음수 가중치 사이클
	//존재 여부를 확인할 수 있다.
	//사이클이 존재한다면 특정 정점에서는 분명히 다시 자기 자신으로 돌아오는 일이 발생할 것이다. 자기 자신의 거리는 0으로 
	//설정을 했으므로 음수 사이클이 존재한다면, 0보다 작은 경로가 발견될 것이다. 이유는 음수 사이클은 자기 자신으로 돌아올 수
	//있게 연결되어 있고, 또 해당 사이클의 가중치가 하나 이상이 음수일 것이다. 또한 사이클 내의 가중치의 총합이 음수이므로
	//반드시 0보다 작게 된다.
	for (int i = 0; i < V; i++)
	{
		// 자기 자신으로의 거리가 0보다 작으면 음수 가중치 사이클이 있는 것으로 판단
		if (distance[i][i] < 0)
			return {};
	}

	return distance;
}

//shortest-path using DP 문제와 비슷한 입력 구조를 가지고 있다. 하지만 이번에는 인접 리스트 표현이 필요 없다.
int main()
{
	int V, E;
	cin >> V >> E;

	vector<vector<int>> weight(V, vector<int>(V, UNKNOWN));

	for (int i = 0; i < E; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;

		weight[u][v] = w;
	}

	vector<vector<int>> distance = FloydWarshall(V, weight);

	if (distance.empty())
	{
		cout << "음수 가중치 사이클이 있습니다." << endl;
		return 0;
	}

	for (int i = 0; i < V; i++)
	{
		cout << i << endl;

		for (int j = 0; j < V; j++)
		{
			cout << "\t" << j << ": ";

			(distance[i][j] == UNKNOWN) ? cout << "_" << endl
				: cout << distance[i][j] << endl;
		}
	}
}

/*
7 9
0 1 3
1 2 5
1 3 10
1 5 -4
2 4 2
3 2 -7
4 1 -3
5 6 -8
6 0 12
*/

/*
6 8
0 1 3
1 3 -8
2 1 3
2 4 2
2 5 5
3 2 3
4 5 -1
5 1 8
*/